{"ast":null,"code":"var _jsxFileName = \"/home/shiro/Documents/repositories/travel-simple/src/app/search/search-page.container.tsx\";\nimport React from 'react';\nimport { SearchPage } from './search-page.component';\nimport { datasourceResidences } from '../data';\nimport { parseDate, matchShortDate, isValidDate } from '../../model';\nexport const SearchPageContainer = () => {\n  const [city, setCity] = React.useState('');\n  const [checkinDateText, setCheckinDateText] = React.useState('');\n  const [checkoutDateText, setCheckoutDateText] = React.useState('');\n  const [checkinInvalidDateFormat, setCheckinInvalidDateFormat] = React.useState(true);\n  const [checkinNonExistingDate, setCheckinNonExistingDate] = React.useState(true);\n  const [checkoutInvalidDateFormat, setCheckoutInvalidDateFormat] = React.useState(true);\n  const [checkoutNonExistingDate, setCheckoutNonExistingDate] = React.useState(true);\n  const [dirtyCheckin, setDirtyCheckin] = React.useState(false);\n  const [dirtyCheckout, setDirtyCheckout] = React.useState(false);\n  const [dirtyCity, setDirtyCity] = React.useState(false);\n\n  const handleChangeCity = event => {\n    setCity(event.target.value);\n  };\n\n  const handleChangeCheckinDate = event => {\n    setCheckinDateText(event.target.value);\n  };\n\n  const handleChangeCheckoutDate = event => {\n    setCheckoutDateText(event.target.value);\n  };\n\n  const handleBlurCheckinDate = () => {\n    const matchCheckin = matchShortDate(checkinDateText);\n    setCheckinInvalidDateFormat(!matchCheckin);\n\n    if (matchCheckin) {\n      const date = parseDate(checkinDateText);\n      const isValid = isValidDate(date);\n      setCheckinNonExistingDate(!isValid);\n    }\n\n    setDirtyCheckin(true);\n  };\n\n  const handleBlurCheckoutDate = () => {\n    const matchCheckout = matchShortDate(checkoutDateText);\n    setCheckoutInvalidDateFormat(!matchCheckout);\n\n    if (matchCheckout) {\n      const date = parseDate(checkoutDateText);\n      const isValid = isValidDate(date);\n      setCheckoutNonExistingDate(!isValid);\n    }\n\n    setDirtyCheckout(true);\n  };\n\n  const handleBlurCity = () => {\n    setDirtyCity(true);\n  };\n\n  const isCheckinAfterCheckout = (checkinDate, checkoutDate) => {\n    return checkinDate.getTime() >= checkoutDate.getTime();\n  };\n\n  const disableButton = () => {\n    return city === '' || checkinInvalidDateFormat || checkinNonExistingDate || checkoutInvalidDateFormat || checkoutNonExistingDate || isCheckinAfterCheckout(parseDate(checkinDateText), parseDate(checkoutDateText));\n  };\n\n  const containsBusyDay = (residence, checkinDate, checkoutDate) => {\n    let hasBusyDays = false;\n    residence.busyDays.forEach(busyDate => {\n      if (busyDate.getTime() >= checkinDate.getTime() && busyDate.getTime() <= checkoutDate.getTime()) {\n        hasBusyDays = true;\n        return;\n      }\n    });\n    return hasBusyDays;\n  };\n\n  const matchResidences = () => {\n    const checkinDate = parseDate(checkinDateText);\n    const checkoutDate = parseDate(checkoutDateText);\n    return datasourceResidences.filter(residence => residence.city == city && !containsBusyDay(residence, checkinDate, checkoutDate));\n  };\n\n  return React.createElement(SearchPage, {\n    onChangeCity: handleChangeCity,\n    onChangeCheckinDate: handleChangeCheckinDate,\n    onChangeCheckoutDate: handleChangeCheckoutDate,\n    onSubmit: matchResidences,\n    onBlurCheckinDate: handleBlurCheckinDate,\n    onBlurCheckoutDate: handleBlurCheckoutDate,\n    onBlurCity: handleBlurCity,\n    disabled: disableButton(),\n    checkinInvalidDateFormat: checkinInvalidDateFormat,\n    checkinNonExistingDate: checkinNonExistingDate,\n    checkoutInvalidDateFormat: checkoutInvalidDateFormat,\n    checkoutNonExistingDate: checkoutNonExistingDate,\n    checkinAfterCheckout: isCheckinAfterCheckout(parseDate(checkinDateText), parseDate(checkoutDateText)),\n    emptyCity: city === '',\n    dirtyCheckin: dirtyCheckin,\n    dirtyCheckout: dirtyCheckout,\n    dirtyCity: dirtyCity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/home/shiro/Documents/repositories/travel-simple/src/app/search/search-page.container.tsx"],"names":["React","SearchPage","datasourceResidences","parseDate","matchShortDate","isValidDate","SearchPageContainer","city","setCity","useState","checkinDateText","setCheckinDateText","checkoutDateText","setCheckoutDateText","checkinInvalidDateFormat","setCheckinInvalidDateFormat","checkinNonExistingDate","setCheckinNonExistingDate","checkoutInvalidDateFormat","setCheckoutInvalidDateFormat","checkoutNonExistingDate","setCheckoutNonExistingDate","dirtyCheckin","setDirtyCheckin","dirtyCheckout","setDirtyCheckout","dirtyCity","setDirtyCity","handleChangeCity","event","target","value","handleChangeCheckinDate","handleChangeCheckoutDate","handleBlurCheckinDate","matchCheckin","date","isValid","handleBlurCheckoutDate","matchCheckout","handleBlurCity","isCheckinAfterCheckout","checkinDate","checkoutDate","getTime","disableButton","containsBusyDay","residence","hasBusyDays","busyDays","forEach","busyDate","matchResidences","filter"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,WAApC,QAAuD,aAAvD;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACS,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,KAAK,CAACS,QAAN,CAAe,EAAf,CAA9C;AACA,QAAM,CAACG,gBAAD,EAAmBC,mBAAnB,IAA0Cb,KAAK,CAACS,QAAN,CAAe,EAAf,CAAhD;AAEA,QAAM,CAACK,wBAAD,EAA2BC,2BAA3B,IAA0Df,KAAK,CAACS,QAAN,CAAe,IAAf,CAAhE;AACA,QAAM,CAACO,sBAAD,EAAyBC,yBAAzB,IAAsDjB,KAAK,CAACS,QAAN,CAAe,IAAf,CAA5D;AACA,QAAM,CAACS,yBAAD,EAA4BC,4BAA5B,IAA4DnB,KAAK,CAACS,QAAN,CAAe,IAAf,CAAlE;AACA,QAAM,CAACW,uBAAD,EAA0BC,0BAA1B,IAAwDrB,KAAK,CAACS,QAAN,CAAe,IAAf,CAA9D;AAEA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCvB,KAAK,CAACS,QAAN,CAAe,KAAf,CAAxC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoCzB,KAAK,CAACS,QAAN,CAAe,KAAf,CAA1C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4B3B,KAAK,CAACS,QAAN,CAAe,KAAf,CAAlC;;AAEA,QAAMmB,gBAAgB,GAAIC,KAAD,IAAgB;AACvCrB,IAAAA,OAAO,CAACqB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD;;AAIA,QAAMC,uBAAuB,GAAIH,KAAD,IAAgB;AAC9ClB,IAAAA,kBAAkB,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AACD,GAFD;;AAIA,QAAME,wBAAwB,GAAIJ,KAAD,IAAgB;AAC/ChB,IAAAA,mBAAmB,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB;AACD,GAFD;;AAIA,QAAMG,qBAAqB,GAAG,MAAM;AAClC,UAAMC,YAAqB,GAAG/B,cAAc,CAACM,eAAD,CAA5C;AACAK,IAAAA,2BAA2B,CAAC,CAACoB,YAAF,CAA3B;;AACA,QAAIA,YAAJ,EAAkB;AAChB,YAAMC,IAAU,GAAGjC,SAAS,CAACO,eAAD,CAA5B;AACA,YAAM2B,OAAO,GAAGhC,WAAW,CAAC+B,IAAD,CAA3B;AACAnB,MAAAA,yBAAyB,CAAC,CAACoB,OAAF,CAAzB;AACD;;AACDd,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GATD;;AAWA,QAAMe,sBAAsB,GAAG,MAAM;AACnC,UAAMC,aAAsB,GAAGnC,cAAc,CAACQ,gBAAD,CAA7C;AACAO,IAAAA,4BAA4B,CAAC,CAACoB,aAAF,CAA5B;;AACA,QAAIA,aAAJ,EAAmB;AACjB,YAAMH,IAAU,GAAGjC,SAAS,CAACS,gBAAD,CAA5B;AACA,YAAMyB,OAAO,GAAGhC,WAAW,CAAC+B,IAAD,CAA3B;AACAf,MAAAA,0BAA0B,CAAC,CAACgB,OAAF,CAA1B;AACD;;AACDZ,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GATD;;AAWA,QAAMe,cAAc,GAAG,MAAM;AAC3Bb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMc,sBAAsB,GAAG,CAACC,WAAD,EAAoBC,YAApB,KAA2C;AACxE,WAAOD,WAAW,CAACE,OAAZ,MAAyBD,YAAY,CAACC,OAAb,EAAhC;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAe;AACnC,WACEtC,IAAI,KAAK,EAAT,IACAO,wBADA,IAEAE,sBAFA,IAGAE,yBAHA,IAIAE,uBAJA,IAKAqB,sBAAsB,CAACtC,SAAS,CAACO,eAAD,CAAV,EAA6BP,SAAS,CAACS,gBAAD,CAAtC,CANxB;AAQD,GATD;;AAWA,QAAMkC,eAAe,GAAG,CAACC,SAAD,EAAuBL,WAAvB,EAA0CC,YAA1C,KAA0E;AAChG,QAAIK,WAAW,GAAG,KAAlB;AACAD,IAAAA,SAAS,CAACE,QAAV,CAAmBC,OAAnB,CAA2BC,QAAQ,IAAI;AACrC,UAAIA,QAAQ,CAACP,OAAT,MAAsBF,WAAW,CAACE,OAAZ,EAAtB,IACAO,QAAQ,CAACP,OAAT,MAAsBD,YAAY,CAACC,OAAb,EAD1B,EACkD;AAChDI,QAAAA,WAAW,GAAG,IAAd;AACA;AACD;AACF,KAND;AAOA,WAAOA,WAAP;AACD,GAVD;;AAYA,QAAMI,eAAe,GAAG,MAAmB;AACzC,UAAMV,WAAW,GAAGvC,SAAS,CAACO,eAAD,CAA7B;AACA,UAAMiC,YAAY,GAAGxC,SAAS,CAACS,gBAAD,CAA9B;AAEA,WAAOV,oBAAoB,CAACmD,MAArB,CACLN,SAAS,IAAIA,SAAS,CAACxC,IAAV,IAAkBA,IAAlB,IAA0B,CAACuC,eAAe,CAACC,SAAD,EAAYL,WAAZ,EAAyBC,YAAzB,CADlD,CAAP;AAGD,GAPD;;AASA,SACE,oBAAC,UAAD;AACE,IAAA,YAAY,EAAEf,gBADhB;AAEE,IAAA,mBAAmB,EAAEI,uBAFvB;AAGE,IAAA,oBAAoB,EAAEC,wBAHxB;AAIE,IAAA,QAAQ,EAAEmB,eAJZ;AAKE,IAAA,iBAAiB,EAAElB,qBALrB;AAME,IAAA,kBAAkB,EAAEI,sBANtB;AAOE,IAAA,UAAU,EAAEE,cAPd;AAQE,IAAA,QAAQ,EAAEK,aAAa,EARzB;AASE,IAAA,wBAAwB,EAAE/B,wBAT5B;AAUE,IAAA,sBAAsB,EAAEE,sBAV1B;AAWE,IAAA,yBAAyB,EAAEE,yBAX7B;AAYE,IAAA,uBAAuB,EAAEE,uBAZ3B;AAaE,IAAA,oBAAoB,EAAEqB,sBAAsB,CAACtC,SAAS,CAACO,eAAD,CAAV,EAA6BP,SAAS,CAACS,gBAAD,CAAtC,CAb9C;AAcE,IAAA,SAAS,EAAEL,IAAI,KAAK,EAdtB;AAeE,IAAA,YAAY,EAAEe,YAfhB;AAgBE,IAAA,aAAa,EAAEE,aAhBjB;AAiBE,IAAA,SAAS,EAAEE,SAjBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAqBD,CA7GM","sourcesContent":["import React from 'react';\nimport { Residence } from '../../model/entities';\nimport { SearchPage } from './search-page.component';\nimport { datasourceResidences } from '../data';\nimport { parseDate, matchShortDate, isValidDate } from '../../model';\n\nexport const SearchPageContainer = () => {\n  const [city, setCity] = React.useState('');\n  const [checkinDateText, setCheckinDateText] = React.useState('');\n  const [checkoutDateText, setCheckoutDateText] = React.useState('');\n\n  const [checkinInvalidDateFormat, setCheckinInvalidDateFormat] = React.useState(true);\n  const [checkinNonExistingDate, setCheckinNonExistingDate] = React.useState(true);\n  const [checkoutInvalidDateFormat, setCheckoutInvalidDateFormat] = React.useState(true);\n  const [checkoutNonExistingDate, setCheckoutNonExistingDate] = React.useState(true);\n\n  const [dirtyCheckin, setDirtyCheckin] = React.useState(false);\n  const [dirtyCheckout, setDirtyCheckout] = React.useState(false);\n  const [dirtyCity, setDirtyCity] = React.useState(false);\n  \n  const handleChangeCity = (event: any) => {\n    setCity(event.target.value);\n  };\n\n  const handleChangeCheckinDate = (event: any) => {\n    setCheckinDateText(event.target.value);\n  };\n\n  const handleChangeCheckoutDate = (event: any) => {\n    setCheckoutDateText(event.target.value);\n  };\n\n  const handleBlurCheckinDate = () => {\n    const matchCheckin: boolean = matchShortDate(checkinDateText);\n    setCheckinInvalidDateFormat(!matchCheckin);\n    if (matchCheckin) {\n      const date: Date = parseDate(checkinDateText);\n      const isValid = isValidDate(date);\n      setCheckinNonExistingDate(!isValid);\n    }\n    setDirtyCheckin(true);\n  };\n  \n  const handleBlurCheckoutDate = () => {\n    const matchCheckout: boolean = matchShortDate(checkoutDateText);\n    setCheckoutInvalidDateFormat(!matchCheckout);\n    if (matchCheckout) {\n      const date: Date = parseDate(checkoutDateText);\n      const isValid = isValidDate(date);\n      setCheckoutNonExistingDate(!isValid);\n    }\n    setDirtyCheckout(true);\n  };\n\n  const handleBlurCity = () => {\n    setDirtyCity(true);\n  };\n\n  const isCheckinAfterCheckout = (checkinDate: Date, checkoutDate: Date) => {\n    return checkinDate.getTime() >= checkoutDate.getTime();\n  };\n\n  const disableButton = (): boolean => {\n    return (\n      city === '' ||\n      checkinInvalidDateFormat ||\n      checkinNonExistingDate ||\n      checkoutInvalidDateFormat ||\n      checkoutNonExistingDate ||\n      isCheckinAfterCheckout(parseDate(checkinDateText), parseDate(checkoutDateText))\n    );\n  };\n\n  const containsBusyDay = (residence: Residence, checkinDate: Date, checkoutDate: Date): boolean => {\n    let hasBusyDays = false;\n    residence.busyDays.forEach(busyDate => {\n      if (busyDate.getTime() >= checkinDate.getTime() &&\n          busyDate.getTime() <= checkoutDate.getTime()) {\n        hasBusyDays = true;\n        return;\n      }\n    });\n    return hasBusyDays;\n  };\n\n  const matchResidences = (): Residence[] => {\n    const checkinDate = parseDate(checkinDateText);\n    const checkoutDate = parseDate(checkoutDateText);\n\n    return datasourceResidences.filter(\n      residence => residence.city == city && !containsBusyDay(residence, checkinDate, checkoutDate)\n    );\n  };\n\n  return (\n    <SearchPage\n      onChangeCity={handleChangeCity}\n      onChangeCheckinDate={handleChangeCheckinDate}\n      onChangeCheckoutDate={handleChangeCheckoutDate}\n      onSubmit={matchResidences}\n      onBlurCheckinDate={handleBlurCheckinDate}\n      onBlurCheckoutDate={handleBlurCheckoutDate}\n      onBlurCity={handleBlurCity}\n      disabled={disableButton()}\n      checkinInvalidDateFormat={checkinInvalidDateFormat}\n      checkinNonExistingDate={checkinNonExistingDate}\n      checkoutInvalidDateFormat={checkoutInvalidDateFormat}\n      checkoutNonExistingDate={checkoutNonExistingDate}\n      checkinAfterCheckout={isCheckinAfterCheckout(parseDate(checkinDateText), parseDate(checkoutDateText))}\n      emptyCity={city === ''}\n      dirtyCheckin={dirtyCheckin}\n      dirtyCheckout={dirtyCheckout}\n      dirtyCity={dirtyCity}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}